@using thesis.Core.ViewModel;
@model GeolocationViewModel

<!-- Boxicons -->
<link href='https://unpkg.com/boxicons@2.0.9/css/boxicons.min.css' rel='stylesheet'>

<!-- fontawesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">

<!-- leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
	  integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
	  crossorigin="" />

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
		integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
		crossorigin=""></script>

<link rel="stylesheet" href="~/css/geolocation.css" asp-append-version="true" />


<section id="content">


	<!-- MAIN STARTS-->
	<main class="geolocation">
		<div class="geo-filter">


			<div class="search">
				<i class='bx bx-search'></i>
				<input type="text" class="form-control" placeholder="Search Location...">
				<button class="btn btn-primary">Search</button>
			</div>
			<div class="container">
				<form method="post" action="/Geolocation/ProcessData">
					<div class="select-btn">
						<span class="btn-text">Show Locations of...</span>
						<span class="arrow-dwn">
							<i class='bx bx-caret-down'></i>
						</span>
					</div>
						<ul class="list-items">
							<li class="item">
								<span>
									@Html.CheckBoxFor(model => model.SlaughterHouses, new { @class = "checkbox" })
								</span>
								<span class="item-text">SlaughterHouses</span>
							</li>
							<li class="item">
								<span>
									@Html.CheckBoxFor(model => model.PoultryDressingPlants, new { @class = "checkbox" })
								</span>
								<span class="item-text">PoultryDressingPlants</span>
							</li>
							<li class="item">
								<span>
									@Html.CheckBoxFor(model => model.MeatCuttingPlants, new { @class = "checkbox" })
								</span>
								<span class="item-text">MeatCuttingPlants</span>
							</li>
							<li class="item">
								<span>
									@Html.CheckBoxFor(model => model.ColdStorageWarehouse, new { @class = "checkbox" })
								</span>
								<span class="item-text">Cold Storage Warehouse</span>
							</li>
							<li class="item">
								<span>
									@Html.CheckBoxFor(model => model.MeatDealers, new { @class = "checkbox" })
								</span>
								<span class="item-text">Meat Dealers</span>
							</li>
							<li class="item">
								<span>
									@Html.CheckBoxFor(model => model.MeatDestinations, new { @class = "checkbox" })
								</span>
								<span class="item-text">Meat Destinations</span>
							</li>
							<li class="item">
								<span>
									@Html.CheckBoxFor(model => model.NMISRTOCXI, new { @class = "checkbox" })
								</span>
								<span class="item-text">NMIS RTOC XI</span>
							</li>
							<button type="submit" class="btn btn-primary">Apply</button>
						</ul>
				</form>

			</div>


		</div>


		<div id="map"></div>
	</main>
	<!-- MAIN ENDS -->

</section>


<script>
	//var nmisrtocxi = @((Model.NMISRTOCXI ? "true" : "false").ToLower());
	var map = L.map('map');
	map.setView([7.1907, 125.4553], 13);

	L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
		maxZoom: 19,
		attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
	}).addTo(map);
	
	@{
		var addressCount = Model.address.Length;
	}

	@for (var i = 0; i < addressCount; i++)
	{
		var address = Model.address[i];
		var color = Model.colors[i];
		@:fetchGeolocation('@address', '@color');
	}

	function fetchGeolocation(address, color) {
			var url = 'https://geocode.maps.co/search?q=' + encodeURIComponent(address);

			fetch(url)
				.then(response => response.json())
				.then(data => {
					// Extract the latitude and longitude from the response
					var lat = data[0].lat;
					var lon = data[0].lon;

					// Add a marker to the map using the retrieved coordinates
					var marker = L.marker([lat, lon]).addTo(map);

					// Create a circle with the specified color for the address
					var circle = L.circle([lat, lon], {
						color: color,
						fillColor: color,
						fillOpacity: 0.5,
						radius: 500
					}).addTo(map);
				})
				.catch(error => {
					console.error('Error fetching geolocation:', error);
				});
		}

	
	
	
	

</script>
<script src="~/js/geolocation.js" asp-append-version="true"></script>

