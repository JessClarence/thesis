@using Microsoft.AspNetCore.Identity
@using thesis.Areas.Identity.Data
@model IEnumerable<thesis.Models.ReceivingReport>

@inject SignInManager<AccountDetails> SignInManager;
@inject UserManager<AccountDetails> UserManager;

@{
    ViewData["Title"] = "Index";
    <style>
        [aria-hidden="true"] {
            position: absolute;
            left: -9999px;
        }
    </style>
}

<link href="~/css/inspectorsidenav.css" rel="stylesheet" />

<section id="content">
    <main>

        <div class="FirstLayer">

            <button id="downloadButton" onclick="download()">
                Download <i class="bx bx-download"></i>
            </button>

        </div>

        <div class="head-title">
            <div class="left">
                <h1>Meat Inspection Report</h1>
                <h3>Filters:</h3>
                <div class="filter-box">
                    <div class="input-wrapper">
                        <label for="startdate">Start Date</label>
                        <input onchange="filterDataDate()" type="date" id="startdate" class="filter">
                    </div>
                    <div class="input-wrapper">
                        <label for="enddate">End Date</label>
                        <input onchange="filterDataDate()" type="date" id="enddate" class="filter">
                    </div>

                    <div class="input-wrapper">
                        <label for="species">Species</label>
                        <select onchange="filterDataSpecies()" id="species" class="filter">
                            <option value="All">All</option>
                            <option value="Cattle">Cattle</option>
                            <option value="Carabao">Carabao</option>
                            <option value="Swine">Swine</option>
                            <option value="Goat">Goat</option>
                            <option value="Chicken">Chicken</option>
                            <option value="Duck">Duck</option>
                            <option value="Horse">Horse</option>
                            <option value="Sheep">Sheep</option>
                            <option value="Ostrich">Ostrich</option>
                            <option value="Crocodile">Crocodile</option>
                        </select>
                    </div>

                    @if (User.IsInRole("InspectorAdministrator"))
                    {
                        @* <div class="input-wrapper">
                    <label for="timeFrame">Time Frame</label>
                    <select onchange="filterDatatimeFrame()" id="timeFrame" class="filter">
                    <option value="">Monthly</option>
                    <option value="">Daily</option>
                    <option value="">Weekly</option>
                    <option value="">Yearly</option>
                    </select>
                    </div>*@
                        @*<div class="input-wrapper">
                    <label>Filter by Meat Establishment:</label>
                    <select id="meatEstablishmentFilter" asp-items="@ViewBag.MeatEstablishments" class="filter">
                    <option value="">All Establishment</option>
                    </select>
                    </div>*@
                    }
                </div>
            </div>
        </div>


        <table class="table table-bordered table-responsive-sm hidden-table" id="tableni">
            <thead>
                <tr>
                    <th scope="col">Date</th>
                    <th scope="col">VerifiedByPOSMSHead</th>
                    <th scope="col">Id</th>
                    <th scope="col">ReceivingReportId</th>

                </tr>
            </thead>
            <tbody>

                @foreach (var inspection in ViewData["meatInspectionReports"] as IEnumerable<thesis.Models.MeatInspectionReport>)
                {
                    <tr>
                        <td>@inspection.RepDate</td>
                        <td>@inspection.VerifiedByPOSMSHead</td>
                        <td>@inspection.Id</td>
                        <td>@inspection.ReceivingReportId</td>
                    </tr>
                }

            </tbody>


        </table>

        <div class="FirstLayer">
            <div class="applications">

                <h3 class="card-title m-b-0">I.Antemortem Inspection</h3>
                <br />
                <h5 class="card-title m-b-0">A. Receiving of Food Animals for Slaughter</h5>
                <br />

                <table class="table table-bordered table-responsive-sm " id="tableOne">
                    <thead>
                        <tr>
                            <th scope="col">Time</th>
                            <th scope="col">Name of Meat Dealer</th>
                            <th scope="col">Species of Food Animals</th>
                            <th scope="col">Total Number of Animals</th>

                            <th scope="col" aria-hidden="true">Id</th>

                        </tr>
                    </thead>
                    @{
                        // Assuming accountId is the specific AccountDetails id you want to filter by
                        string accountId = UserManager.GetUserId(User);
                        var filteredModel = Model;

                        if (User.IsInRole("MeatEstablishmentRepresentative") || User.IsInRole("MeatInspector"))
                        {
                            // Fetch the MeatEstablishmentId of the logged-in user from the UserManager (assuming it has the necessary extension method to fetch user details).
                            var loggedInUser = await UserManager.GetUserAsync(User);

                            // Explicitly cast the meatEstablishmentId to a non-nullable int and provide a default value of 0 if it's null.
                            int meatEstablishmentId = loggedInUser.MeatEstablishmentId ?? 0;

                            // Filter the Model based on the MeatEstablishmentId
                            filteredModel = Model.Where(item => item.AccountDetails.MeatEstablishmentId == meatEstablishmentId);
                        }
                        else if (User.IsInRole("InspectorAdmin"))
                        {
                            // No filtering required for InspectorAdmin, so keep the original Model.
                            filteredModel = Model;
                        }
                    }
                    <tbody>

                        @foreach (var item in filteredModel)
                        {
                            <tr>
                                <td>@item.RecTime</td>
                                <td>@item.MeatDealers.FirstName</td>
                                <td>@item.Species</td>
                                <td>@item.NoOfHeads</td>
                                <td aria-hidden="true">@item.Id</td>
                            </tr>
                        }

                    </tbody>

                </table>


                <h5 class="card-title m-b-0">B. Conduct of Antemortem Inspection</h5>
                <br />
                <table class="table table-bordered table-responsive-sm " id="tableTwo">
                    <thead>
                        <tr>
                            <th scope="col">Name of Meat Dealer</th>
                            <th scope="col">Species of Food Animals</th>
                            <th scope="col">Issue</th>
                            <th scope="col">No. of heads</th>
                            <th scope="col">Weight (kg)</th>
                            <th scope="col">Cause</th>
                            <th scope="col" aria-hidden="true">Id</th>
                            <th scope="col" aria-hidden="true">MeatInspectionId</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var inspection in ViewData["ConductOfInspections"] as IEnumerable<thesis.Models.ConductOfInspection>)
                        {
                            <tr>
                                <td>@inspection.MeatInspectionReport.ReceivingReport.MeatDealers.FirstName</td>
                                <td>@inspection.MeatInspectionReport.ReceivingReport.Species</td>
                                <td>@inspection.Issue</td>
                                <td>@inspection.NoOfHeads</td>
                                <td>@inspection.Weight</td>
                                <td>@inspection.Cause</td>
                                <td aria-hidden="true">@inspection.Id</td>
                                <td aria-hidden="true">@inspection.MeatInspectionReportId</td>
                            </tr>
                        }
                    </tbody>
                </table>




                <h5 class="card-title m-b-0">C. Passed for Slaughter</h5>
                <br />
                <table class="table table-bordered" id="tableThree">
                    <thead>
                        <tr>
                            <th scope="col">Name of Meat Dealer</th>
                            <th scope="col">Species of Food Animal</th>
                            <th scope="col">No. of heads</th>
                            <th scope="col">Weight</th>
                            <th scope="col" aria-hidden="true">Id</th>
                            <th scope="col" aria-hidden="true">ConductOfInpscetionId</th>

                        </tr>
                    </thead>
                    <tbody>

                        @foreach (var passed in ViewData["PassedForSlaughters"] as IEnumerable<thesis.Models.PassedForSlaughter>)
                        {
                            <tr>
                                <td>@passed.ConductOfInspection.MeatInspectionReport.ReceivingReport.MeatDealers.FirstName</td>
                                <td>@passed.ConductOfInspection.MeatInspectionReport.ReceivingReport.Species</td>
                                <td>@passed.NoOfHeads</td>
                                <td>@passed.Weight</td>
                                <td aria-hidden="true">@passed.Id</td>
                                <td aria-hidden="true">@passed.ConductOfInspectionId</td>
                                <!-- Add columns for "Rejected for Slaughter" and "Condemned" as needed -->
                            </tr>
                            // Build a unique key for each combination of Issue, Cause, Species, and Meat Dealer

                        }
                    </tbody>

                </table>

            </div>
        </div>

        <div class="FirstLayer">
            <div class="applications">
                <h3 class="card-title m-b-0">II. Postmortem Inspection</h3>
                <br />
                <table class="table table-bordered" id="tableFour">
                    <thead>
                        <tr>
                            <th scope="col">Name of Meat Dealer></th>
                            <th scope="col">Type of Meat</th>
                            <th scope="col">Animal Part</th>
                            <th scope="col">Cause</th>
                            <th scope="col">No. of heads</th>
                            <th scope="col">Weight (kg)</th>
                            <th scope="col" aria-hidden="true">Id</th>
                            <th scope="col" aria-hidden="true">passedSlaughterId</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var post in ViewData["postmortem"] as IEnumerable<thesis.Models.Postmortem>)
                        {
                            <tr>
                                <td>@post.PassedForSlaughter.ConductOfInspection.MeatInspectionReport.ReceivingReport.MeatDealers.FirstName</td>
                                <td>@post.PassedForSlaughter.ConductOfInspection.MeatInspectionReport.ReceivingReport.Species</td>
                                <td>@post.AnimalPart</td>
                                <td>@post.Cause</td>
                                <td>@post.NoOfHeads</td>
                                <td>@post.Weight</td>
                                <td aria-hidden="true">@post.Id</td>
                                <td aria-hidden="true">@post.PassedForSlaughterId</td>

                                <!-- Add columns for "Rejected for Slaughter" and "Condemned" as needed -->
                            </tr>

                        }
                    </tbody>

                </table>


            </div>
        </div>




        <div class="FirstLayer">
            <div class="applications">

                <h3 class="card-title m-b-0">III. Total Number of Food Animals Fit for Human Consumption</h3>
                <br />
                <table class="table table-bordered" id="tableFive">
                    <thead>
                        <tr>
                            <th scope="col">Species of Food Animals</th>
                            <th scope="col">Total Number of Animals</th>
                            <th scope="col">Total Dressed Weight</th>
                            <th scope="col" aria-hidden="true">Id</th>
                            <th scope="col" aria-hidden="true">PostmortemId</th>


                        </tr>

                    </thead>
                    <tbody>

                        @foreach (var total in ViewData["totalNoFitForHumanConsumption"] as IEnumerable<thesis.Models.totalNoFitForHumanConsumptions>)
                        {
                            <tr>

                                <td>@total.Postmortem.PassedForSlaughter.ConductOfInspection.MeatInspectionReport.ReceivingReport.Species</td>
                                <td>@total.NoOfHeads</td>
                                <td>@total.DressedWeight</td>
                                <td aria-hidden="true">@total.Id</td>
                                <td aria-hidden="true">@total.PostmortemId</td>

                                <!-- Add columns for "Rejected for Slaughter" and "Condemned" as needed -->
                            </tr>

                        }

                </table>

            </div>

        </div>

        <div class="FirstLayer">
            <div class="applications">

                <h3 class="card-title m-b-0">IV. Summary and Distribution of Meat Inspection Certificate</h3>
                <br />
                <table class="table table-bordered" id="tableSix">
                    <thead>
                        <tr>
                            <th scope="col">Type of Meat</th>
                            <th scope="col">No. of heads</th>
                            <th scope="col">Weight (kg.)</th>
                            <th scope="col">Destination Name</th>
                            <th scope="col">Destination Address</th>
                            <th scope="col">Meat Inspection Certificate Cancelled (sheets) If any</th>
                            <th scope="col" aria-hidden="true">Id</th>
                            <th scope="col" aria-hidden="true">totalfitId</th>


                        </tr>

                    </thead>
                    <tbody>
                        @foreach (var summary in ViewData["SummaryAndDistributionOfMICs"] as IEnumerable<thesis.Models.SummaryAndDistributionOfMIC>)
                        {
                            <tr>

                                <td>@summary.TotalNoFitForHumanConsumption.Postmortem.PassedForSlaughter.ConductOfInspection.MeatInspectionReport.ReceivingReport.Species</td>
                                <td>@summary.TotalNoFitForHumanConsumption.NoOfHeads</td>
                                <td>@summary.TotalNoFitForHumanConsumption.DressedWeight</td>
                                <td>@summary.DestinationName</td>
                                <td>@summary.DestinationAddress</td>
                                <td>@summary.CertificateStatus</td>
                                <td aria-hidden="true">@summary.Id</td>
                                <td aria-hidden="true">@summary.TotalNoFitForHumanConsumptionId</td>


                                <!-- Add columns for "Rejected for Slaughter" and "Condemned" as needed -->
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        </div>



        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.8/xlsx.full.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.2/FileSaver.min.js"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx-style/0.8.16/xlsx.full.min.js"></script>

        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


        </script>



        <script>

            function download() {
                // Initialize the allData array to empty before appending data from each table
                allData = [];


                // Combine data from all tables into the allData array
                var tableOneData = XLSX.utils.sheet_to_json(XLSX.utils.table_to_sheet(document.getElementById('tableOne')), { header: 1 });
                var tableTwoData = XLSX.utils.sheet_to_json(XLSX.utils.table_to_sheet(document.getElementById('tableTwo')), { header: 1 });
                var tableThreeData = XLSX.utils.sheet_to_json(XLSX.utils.table_to_sheet(document.getElementById('tableThree')), { header: 1 });
                var tableFourData = XLSX.utils.sheet_to_json(XLSX.utils.table_to_sheet(document.getElementById('tableFour')), { header: 1 });
                var tableFiveData = XLSX.utils.sheet_to_json(XLSX.utils.table_to_sheet(document.getElementById('tableFive')), { header: 1 });
                var tableSixData = XLSX.utils.sheet_to_json(XLSX.utils.table_to_sheet(document.getElementById('tableSix')), { header: 1 });


                var headerRow = ["MEAT INSPECTION REPORT", "", "", ""];
                allData.unshift(headerRow);

                // Determine the maximum number of rows in all six tables
                var maxRows = Math.max(tableOneData.length, tableTwoData.length, tableThreeData.length, tableFourData.length, tableFiveData.length, tableSixData.length);

                // Create a new row in the allData array for each row in tableOne, tableTwo, and tableThree
                for (var i = 0; i < maxRows; i++) {

                    var rowData = [];
                    // Add data from tableOne
                    if (i < tableOneData.length) {
                        rowData.push(...tableOneData[i]);
                    } else {
                        // Add empty cells for rows that are not present in tableOne

                        rowData.push('', '', '', '');
                    }

                    rowData.push('');
                    // Add data from tableTwo
                    if (i < tableTwoData.length) {
                        rowData.push(...tableTwoData[i]);
                    } else {
                        // Add empty cells for rows that are not present in tableTwo
                        rowData.push('', '', '', '', '', '');
                    }
                    rowData.push('');
                    // Add data from tableThree
                    if (i < tableThreeData.length) {
                        rowData.push(...tableThreeData[i]);
                    } else {
                        // Add empty cells for rows that are not present in tableThree
                        rowData.push('', '', '', '');
                    }

                    allData.push(rowData);
                }

                // Create a new row in the allData array for each row in tableFour, tableFive, and tableSix
                for (var i = 0; i < maxRows; i++) {
                    var rowData = [];

                    // Add data from tableFour
                    if (i < tableFourData.length) {
                        rowData.push(...tableFourData[i]);
                    } else {
                        // Add empty cells for rows that are not present in tableFour
                        rowData.push('', '', '', '', '', '');
                    }
                    allData.push(rowData);
                }

                for (var i = 0; i < maxRows; i++) {
                    var rowData = [];
                    // Add data from tableFive
                    if (i < tableFiveData.length) {
                        rowData.push(...tableFiveData[i]);
                    } else {
                        // Add empty cells for rows that are not present in tableFive
                        rowData.push('', '', '', '');
                    }
                    allData.push(rowData);
                }


                for (var i = 0; i < maxRows; i++) {
                    var rowData = [];
                    // Add data from tableSix
                    if (i < tableSixData.length) {
                        rowData.push(...tableSixData[i]);
                    } else {
                        // Add empty cells for rows that are not present in tableSix
                        rowData.push('', '', '', '', '', '');
                    }

                    allData.push(rowData);
                }

                // Create a new workbook with a single sheet
                var ws = XLSX.utils.json_to_sheet(allData, { skipHeader: true });

                var mergeHeaderRange = { s: { r: 0, c: 0 }, e: { r: 0, c: 15 } };
                if (!ws['!merges']) ws['!merges'] = [];
                ws['!merges'].push(mergeHeaderRange);


                // Create a new workbook
                var wb = XLSX.utils.book_new();

                // Add the sheet to the workbook
                XLSX.utils.book_append_sheet(wb, ws, 'CombinedData');

                // Convert workbook to binary XLSX format
                var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });

                // Save the file
                saveAs(new Blob([wbout], { type: 'application/octet-stream' }), 'data5.xlsx');
            }
        </script>



        <script>
            $(document).ready(function () {
                // Check if tableOne is initially empty
                var isTableOneEmpty = $('#tableOne tbody tr').length === 0;

                if (isTableOneEmpty) {
                    $('#tableni').hide(); // Hide tableni if tableOne is empty
                    $('#tableThree').hide();
                    $('#tableTwo').hide();
                    $('#tableFour').hide();
                    $('#tableFive').hide();
                    $('#tableSix').hide(); // Hide tableSix if tableOne is empty
                    // Add logic here to hide related rows in tableni and tableSix
                }

                // Other code and event listeners...
            });
            function updateFilter() {
                var receivingReportIds = [];

                // Loop through the visible rows in tableOne and store their IDs
                $('#tableOne tbody tr:visible').each(function () {
                    var id = $(this).find('td:last').text();
                    receivingReportIds.push(id);
                });

                // Loop through the rows in tableni and show/hide based on the filter
                $('#tableni tbody tr').each(function () {
                    var receivingReportId = $(this).find('td:last').text();

                    if (receivingReportIds.includes(receivingReportId)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }


            function tableTwo() {
                var meatInspectionIds = [];

                // Loop through the visible rows in tableOne and store their IDs
                $('#tableni tbody tr:visible').each(function () {
                    var id = $(this).find('td:eq(2)').text();
                    meatInspectionIds.push(id);
                });



                $('#tableTwo tbody tr').each(function () {
                    var meatInspectionId = $(this).find('td:eq(7)').text(); // Get MeatInspectionId from the 8th column

                    if (meatInspectionIds.includes(meatInspectionId)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }

            function tableThree() {
                var ConductOfInpsectionIds = [];

                // Loop through the visible rows in tableOne and store their IDs
                $('#tableTwo tbody tr:visible').each(function () {
                    var id = $(this).find('td:eq(6)').text();
                    ConductOfInpsectionIds.push(id);
                });



                $('#tableThree tbody tr').each(function () {
                    var ConductOfInpsectionId = $(this).find('td:eq(5)').text(); // Get MeatInspectionId from the 8th column

                    if (ConductOfInpsectionIds.includes(ConductOfInpsectionId)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }
            function tableFour() {
                var passedSlaughterIds = [];

                // Loop through the visible rows in tableOne and store their IDs
                $('#tableThree tbody tr:visible').each(function () {
                    var id = $(this).find('td:eq(4)').text();
                    passedSlaughterIds.push(id);
                });


                $('#tableFour tbody tr').each(function () {
                    var passedSlaughterId = $(this).find('td:eq(7)').text(); // Get MeatInspectionId from the 8th column

                    if (passedSlaughterIds.includes(passedSlaughterId)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }

            function tableFive() {
                var PostmortemIds = [];

                // Loop through the visible rows in tableOne and store their IDs
                $('#tableFour tbody tr:visible').each(function () {
                    var id = $(this).find('td:eq(6)').text();
                    PostmortemIds.push(id);
                });


                $('#tableFive tbody tr').each(function () {
                    var PostmortemId = $(this).find('td:eq(4)').text(); // Get MeatInspectionId from the 8th column

                    if (PostmortemIds.includes(PostmortemId)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }

            function tableSix() {
                var totalfitIds = [];

                // Loop through the visible rows in tableOne and store their IDs
                $('#tableFive tbody tr:visible').each(function () {
                    var id = $(this).find('td:eq(3)').text();
                    totalfitIds.push(id);
                });


                $('#tableSix tbody tr').each(function () {
                    var totalfitId = $(this).find('td:eq(7)').text(); // Get MeatInspectionId from the 8th column

                    if (totalfitIds.includes(totalfitId)) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                });
            }


            //date
            function filterDataDate() {
                var startDate = new Date(document.getElementById("startdate").value);
                startDate.setHours(0, 0, 0, 0); // Set time to start of the day
                var endDate = new Date(document.getElementById("enddate").value);
                endDate.setHours(23, 59, 59, 999); // Set time to end of the day

                var rows = document.querySelectorAll("#tableOne tbody tr");

                rows.forEach(function (row) {
                    var dateCell = row.querySelector("td:first-child");
                    var dateString = dateCell.textContent;
                    var rowDate = new Date(dateString.split(" ")[0]);

                    if (startDate && endDate) {
                        if (rowDate >= startDate && rowDate <= endDate) {
                            row.style.display = "";
                        } else {
                            row.style.display = "none";
                        }
                    }
                });
                updateFilter();
                tableTwo();
                tableThree();
                tableFour();
                tableFive();
                tableSix();
            }
            //species

            function filterDataSpecies() {
                var selectedSpecies = document.getElementById("species").value;
                var table = document.getElementById("tableOne");
                var rows = table.getElementsByTagName("tr");

                for (var i = 1; i < rows.length; i++) { // Start from 1 to skip the header row
                    var speciesCell = rows[i].cells[2]; // Assuming species is in the third column (index 2)

                    if (selectedSpecies === "All" || speciesCell.innerHTML === selectedSpecies) {
                        rows[i].style.display = "";
                    } else {
                        rows[i].style.display = "none";
                    }
                }
                updateFilter();
                tableTwo();
                tableThree();
                tableFour();
                tableFive();
                tableSix();
            }

        </script>





    </main>
</section>



