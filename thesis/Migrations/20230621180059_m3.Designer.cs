// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using thesis.Data;

#nullable disable

namespace thesis.Migrations
{
    [DbContext(typeof(thesisContext))]
    [Migration("20230621180059_m3")]
    partial class m3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.5.23280.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("thesis.Areas.Identity.Data.AccountDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("thesis.Models.AntemortemInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConductOfInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("PassedForSlaughterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConductOfInspectionId");

                    b.HasIndex("PassedForSlaughterId");

                    b.ToTable("antemortemInspections");
                });

            modelBuilder.Entity("thesis.Models.ConductOfInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("WeightInKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("conductOfInspections");
                });

            modelBuilder.Entity("thesis.Models.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MeatEstablishmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("MeatEstablishmentId");

                    b.ToTable("inspectors");
                });

            modelBuilder.Entity("thesis.Models.MeatDealer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeatEstablishmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.ToTable("meatDealers");
                });

            modelBuilder.Entity("thesis.Models.MeatEstablishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeatEstablishmentRepresentativeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("establishmentType")
                        .HasColumnType("int");

                    b.Property<int>("licenseToOperateNumber")
                        .HasColumnType("int");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentRepresentativeId");

                    b.ToTable("meatEstablishments");
                });

            modelBuilder.Entity("thesis.Models.MeatEstablishmentRepresentative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.ToTable("meatEstablishmentRepresentatives");
                });

            modelBuilder.Entity("thesis.Models.MeatInspectionCertUtilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<int>("NoOfMICIssued")
                        .HasColumnType("int");

                    b.Property<int>("VolumeInKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("meatInspectionCertUtilizations");
                });

            modelBuilder.Entity("thesis.Models.MeatInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RepDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SummaryAndDistributionOfMICId")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoFitForHumanConsumptionId")
                        .HasColumnType("int");

                    b.Property<string>("VerifiedByPOSMSHead")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SummaryAndDistributionOfMICId");

                    b.HasIndex("TotalNoFitForHumanConsumptionId");

                    b.ToTable("meatInspectionReports");
                });

            modelBuilder.Entity("thesis.Models.MeatInspectionSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("CondemnedInKg")
                        .HasColumnType("int");

                    b.Property<int>("Kind")
                        .HasColumnType("int");

                    b.Property<int>("PassedInKg")
                        .HasColumnType("int");

                    b.Property<int>("TotalInspectedInKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("meatInspectionSummaries");
                });

            modelBuilder.Entity("thesis.Models.PassedForSlaughter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("WeightInKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("passedForSlaughters");
                });

            modelBuilder.Entity("thesis.Models.PostmortemReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("WeightInKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("postmortemReports");
                });

            modelBuilder.Entity("thesis.Models.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InspectorId")
                        .HasColumnType("int");

                    b.Property<int?>("MeatInspectionReportId")
                        .HasColumnType("int");

                    b.Property<string>("RecDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("MeatInspectionReportId");

                    b.ToTable("receivings");
                });

            modelBuilder.Entity("thesis.Models.ReceivingConductOfInspection", b =>
                {
                    b.Property<int>("ReceivingId")
                        .HasColumnType("int");

                    b.Property<int>("ConductOfInspectionId")
                        .HasColumnType("int");

                    b.HasKey("ReceivingId", "ConductOfInspectionId");

                    b.HasIndex("ConductOfInspectionId");

                    b.ToTable("receivingConductOfInspections");
                });

            modelBuilder.Entity("thesis.Models.ReceivingPassedForSlaughter", b =>
                {
                    b.Property<int>("ReceivingId")
                        .HasColumnType("int");

                    b.Property<int>("PassedForSlaughterId")
                        .HasColumnType("int");

                    b.HasKey("ReceivingId", "PassedForSlaughterId");

                    b.HasIndex("PassedForSlaughterId");

                    b.ToTable("receivingPassedForSlaughters");
                });

            modelBuilder.Entity("thesis.Models.ReceivingPostmortemReport", b =>
                {
                    b.Property<int>("ReceivingId")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemReportId")
                        .HasColumnType("int");

                    b.HasKey("ReceivingId", "PostmortemReportId");

                    b.HasIndex("PostmortemReportId");

                    b.ToTable("receivingPostmortemReports");
                });

            modelBuilder.Entity("thesis.Models.ReceivingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HoldingPenNo")
                        .HasColumnType("int");

                    b.Property<int>("LiveWeighInKg")
                        .HasColumnType("int");

                    b.Property<int>("MeatDealerId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("OriginOfFoodAnimals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShipmentBatchCode")
                        .HasColumnType("int");

                    b.Property<string>("ShippingDocuments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpeciesTypeOfFoodAnimals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatDealerId");

                    b.ToTable("receivingReports");
                });

            modelBuilder.Entity("thesis.Models.SecondaryMeatEstablishmentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InspectorId")
                        .HasColumnType("int");

                    b.Property<int>("MeatInspectionCertUtilizationId")
                        .HasColumnType("int");

                    b.Property<int>("MeatInspectionSummaryId")
                        .HasColumnType("int");

                    b.Property<string>("NotedByPOSMSHead")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("MeatInspectionCertUtilizationId");

                    b.HasIndex("MeatInspectionSummaryId");

                    b.ToTable("secondaryMeatEstablishmentReports");
                });

            modelBuilder.Entity("thesis.Models.ServiceTransactionDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InspectorId")
                        .HasColumnType("int");

                    b.Property<string>("NMISRTD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.Property<string>("VerifiedByPOSMSHead")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InspectorId");

                    b.HasIndex("ReportId");

                    b.ToTable("serviceTransactionDescription");
                });

            modelBuilder.Entity("thesis.Models.ServiceTransactionDescriptionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LGUShare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NMISShare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("PMFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VolumeInKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("serviceTransactionDescriptionReports");
                });

            modelBuilder.Entity("thesis.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeatInspectionCertificateStatus")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("WeightInKg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("summaryAndDistributionOfMICs");
                });

            modelBuilder.Entity("thesis.Models.TotalNoFitForHumanConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DressedWeightInKg")
                        .HasColumnType("int");

                    b.Property<int>("NoOfAnimals")
                        .HasColumnType("int");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("totalNoFitForHumanConsumptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("thesis.Areas.Identity.Data.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("thesis.Areas.Identity.Data.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Areas.Identity.Data.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("thesis.Areas.Identity.Data.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("thesis.Models.AntemortemInspection", b =>
                {
                    b.HasOne("thesis.Models.ConductOfInspection", "ConductOfInspection")
                        .WithMany()
                        .HasForeignKey("ConductOfInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.PassedForSlaughter", "PassedForSlaughter")
                        .WithMany()
                        .HasForeignKey("PassedForSlaughterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConductOfInspection");

                    b.Navigation("PassedForSlaughter");
                });

            modelBuilder.Entity("thesis.Models.Inspector", b =>
                {
                    b.HasOne("thesis.Areas.Identity.Data.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("thesis.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountDetails");

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("thesis.Models.MeatDealer", b =>
                {
                    b.HasOne("thesis.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("thesis.Models.MeatEstablishment", b =>
                {
                    b.HasOne("thesis.Models.MeatEstablishmentRepresentative", "MeatEstablishmentRepresentative")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentRepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatEstablishmentRepresentative");
                });

            modelBuilder.Entity("thesis.Models.MeatEstablishmentRepresentative", b =>
                {
                    b.HasOne("thesis.Areas.Identity.Data.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("thesis.Models.MeatInspectionReport", b =>
                {
                    b.HasOne("thesis.Models.SummaryAndDistributionOfMIC", "SummaryAndDistributionOfMIC")
                        .WithMany()
                        .HasForeignKey("SummaryAndDistributionOfMICId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.TotalNoFitForHumanConsumption", "TotalNoFitForHumanConsumption")
                        .WithMany()
                        .HasForeignKey("TotalNoFitForHumanConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SummaryAndDistributionOfMIC");

                    b.Navigation("TotalNoFitForHumanConsumption");
                });

            modelBuilder.Entity("thesis.Models.Receiving", b =>
                {
                    b.HasOne("thesis.Models.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.MeatInspectionReport", null)
                        .WithMany("Receiving")
                        .HasForeignKey("MeatInspectionReportId");

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("thesis.Models.ReceivingConductOfInspection", b =>
                {
                    b.HasOne("thesis.Models.ConductOfInspection", "ConductOfInspection")
                        .WithMany("receivingConductOfInspections")
                        .HasForeignKey("ConductOfInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.Receiving", "Receiving")
                        .WithMany("receivingConductOfInspections")
                        .HasForeignKey("ReceivingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConductOfInspection");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("thesis.Models.ReceivingPassedForSlaughter", b =>
                {
                    b.HasOne("thesis.Models.PassedForSlaughter", "PassedForSlaughter")
                        .WithMany("receivingPassedForSlaughters")
                        .HasForeignKey("PassedForSlaughterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.Receiving", "Receiving")
                        .WithMany("receivingPassedForSlaughters")
                        .HasForeignKey("ReceivingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedForSlaughter");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("thesis.Models.ReceivingPostmortemReport", b =>
                {
                    b.HasOne("thesis.Models.PostmortemReport", "PostmortemReport")
                        .WithMany("receivingPostmortemReports")
                        .HasForeignKey("PostmortemReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.Receiving", "Receiving")
                        .WithMany("receivingPostmortemReports")
                        .HasForeignKey("ReceivingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostmortemReport");

                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("thesis.Models.ReceivingReport", b =>
                {
                    b.HasOne("thesis.Models.MeatDealer", "MeatDealer")
                        .WithMany()
                        .HasForeignKey("MeatDealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatDealer");
                });

            modelBuilder.Entity("thesis.Models.SecondaryMeatEstablishmentReport", b =>
                {
                    b.HasOne("thesis.Models.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.MeatInspectionCertUtilization", "MeatInspectionCertUtilization")
                        .WithMany()
                        .HasForeignKey("MeatInspectionCertUtilizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.MeatInspectionSummary", "MeatInspectionSummary")
                        .WithMany()
                        .HasForeignKey("MeatInspectionSummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspector");

                    b.Navigation("MeatInspectionCertUtilization");

                    b.Navigation("MeatInspectionSummary");
                });

            modelBuilder.Entity("thesis.Models.ServiceTransactionDescription", b =>
                {
                    b.HasOne("thesis.Models.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("thesis.Models.ServiceTransactionDescriptionReport", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inspector");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("thesis.Models.ConductOfInspection", b =>
                {
                    b.Navigation("receivingConductOfInspections");
                });

            modelBuilder.Entity("thesis.Models.MeatInspectionReport", b =>
                {
                    b.Navigation("Receiving");
                });

            modelBuilder.Entity("thesis.Models.PassedForSlaughter", b =>
                {
                    b.Navigation("receivingPassedForSlaughters");
                });

            modelBuilder.Entity("thesis.Models.PostmortemReport", b =>
                {
                    b.Navigation("receivingPostmortemReports");
                });

            modelBuilder.Entity("thesis.Models.Receiving", b =>
                {
                    b.Navigation("receivingConductOfInspections");

                    b.Navigation("receivingPassedForSlaughters");

                    b.Navigation("receivingPostmortemReports");
                });
#pragma warning restore 612, 618
        }
    }
}
