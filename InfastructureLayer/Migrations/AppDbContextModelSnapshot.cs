// <auto-generated />
using System;
using InfastructureLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfastructureLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("MeatEstablishmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("contactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "40391f3e-b54c-4c84-bf11-31f435273605",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05be979a-90cd-452a-acf8-012aee7bef5b",
                            Email = "super@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("0f32cd34-8346-461c-8a1c-3273f4f4d098"),
                            NormalizedEmail = "SUPER@ADMIN.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFIrbrSm9g6kQJDLS2W5jRIxiKlfd3yPNrXhNZacA0sHXVXLsRyHHqRoqOnirktXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "396a3331-817b-486d-997c-b455be314795",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0041d2d8-d7fe-460c-ad07-9d61c77c3a62",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("d21b287d-8e00-4bfb-beea-5cea7b419546"),
                            NormalizedEmail = "INSPECTOR@ADMIN.COM",
                            NormalizedUserName = "INSPECTORADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPAzv5cHV3lbkCld8Se9qD5xEwYBaqK1jt7Hh4xV5nLdJdpaKb+4oZeZ9sT2Dq3bRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "inspectoradmin",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "16d52f03-c3bc-4657-8bce-6a8e90376885",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63aa6c4f-52e8-41a7-ac67-ec220d3a7b33",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("eba443da-7bed-4469-99b1-cd15394c4e26"),
                            NormalizedEmail = "MTV@ADMIN.COM",
                            NormalizedUserName = "MTVRADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWvwy3+iHaI2DORmspoLb3qbOy2OqzSYYbgnsAxjbnm0mRijMdWMNXmIysvjb1eJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvadmin",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "81eab651-1155-4e57-8096-fa775110e0b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9d1d970-c496-4e9d-8e67-77afb3ead3bf",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("bab844f5-991c-4ecd-bd2e-d1f407c17036"),
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHTTmmNYX+M5UT3s5fh1oH9LtbGf4gqgl5IR8EozlJWSnlc3FkmXbyvTGaG+3vcwBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "cd457db5-f2b0-4f29-a08e-7f2dbaae9f81",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "164380fc-a7fb-4b79-89ed-246d7beea53a",
                            Email = "meat@rep.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("0f32cd34-8346-461c-8a1c-3273f4f4d098"),
                            NormalizedEmail = "MEAT@REP.COM",
                            NormalizedUserName = "MEATREP",
                            PasswordHash = "AQAAAAIAAYagAAAAEJG7fzCtkhPWaH6ujhXoYZwM8qH+buccMf8oeZdg7VuaYQhKcuXukkV0UPAfdQlPrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatrep",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e7e77c05-4e01-4362-a6aa-af801894fa7a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5958e0ae-9976-49e7-87dc-e63782dbe847",
                            Email = "meat@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("d21b287d-8e00-4bfb-beea-5cea7b419546"),
                            NormalizedEmail = "MEAT@INSPECTOR.COM",
                            NormalizedUserName = "MEATINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEJN3hu8pDDND+7FlLQRnCCQFS0+92FsnKG3jQCTuNbsc5T1k6sgqZKZ+9imZobAA3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatinspector",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "8b1a576f-2e46-426e-9475-e5e8ab15f43a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dff1729a-bd95-46bc-a542-2af787bd87e7",
                            Email = "mtv@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("eba443da-7bed-4469-99b1-cd15394c4e26"),
                            NormalizedEmail = "MTV@INSPECTOR.COM",
                            NormalizedUserName = "MTVINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOm+szFfn2Cg470PivD58doJNCpQPNH/lx2StLX7Nh4oyU+UeMmY7oQdYW7E3puttQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvinspector",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "489322fc-9ee4-4540-98c6-4db112033c06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c90fd558-f828-43ae-95e3-65b300873c05",
                            Email = "mtv@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MeatEstablishmentId = new Guid("bab844f5-991c-4ecd-bd2e-d1f407c17036"),
                            NormalizedEmail = "MTV@USER.COM",
                            NormalizedUserName = "MTVUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAB+jcEdqFRTzo9MzBworjxUb9oZP5PR4BnspY3TIqIlAd2qbVya2TB9szdizAq1dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvuser",
                            birthdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("estserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspecttime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("operatorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("DomainLayer.Models.ConductOfInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int>("MeatInspectionReportId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeatInspectionReportId");

                    b.ToTable("ConductOfInspections");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("DisapprovedApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LicenseBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseFront")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DomainLayer.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlyDissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlySatisfied")
                        .HasColumnType("int");

                    b.Property<int>("Neutral")
                        .HasColumnType("int");

                    b.Property<int>("Satisfied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("DomainLayer.Models.Helper", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperMname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Helpers");
                });

            modelBuilder.Entity("DomainLayer.Models.LogTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogTransactions");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccreditionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HelperId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("applicationtype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("HelperId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MTVApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Processed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("MTVApplicationResults");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlateNo")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MTVDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectlyInstalled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enclosed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insulated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PlasticCurtains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempControlled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("passorfail")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVquizzes");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MeatEstablishmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.ToTable("MeatDealers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("203df488-a939-4b85-9f8e-1a7bff9af18c"),
                            FirstName = "Meat",
                            LastName = "Dealer 1",
                            MeatEstablishmentId = new Guid("0f32cd34-8346-461c-8a1c-3273f4f4d098")
                        },
                        new
                        {
                            Id = new Guid("3b6757a8-8280-42de-84dd-e5cd8d926284"),
                            FirstName = "Meat",
                            LastName = "Dealer 2",
                            MeatEstablishmentId = new Guid("d21b287d-8e00-4bfb-beea-5cea7b419546")
                        },
                        new
                        {
                            Id = new Guid("e5593a4e-e953-42d4-b7e2-378eb7a9c639"),
                            FirstName = "Meat",
                            LastName = "Dealer 3",
                            MeatEstablishmentId = new Guid("eba443da-7bed-4469-99b1-cd15394c4e26")
                        },
                        new
                        {
                            Id = new Guid("c597346a-bb69-4fee-ba30-f6d46a8b0e70"),
                            FirstName = "Meat",
                            LastName = "Dealer 4",
                            MeatEstablishmentId = new Guid("bab844f5-991c-4ecd-bd2e-d1f407c17036")
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.MeatEstablishment", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<int?>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("LicenseToOperateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MeatEstablishment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f32cd34-8346-461c-8a1c-3273f4f4d098"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "71c04653-66a2-4bb9-8dda-87198b7d800b",
                            Long = 0.0,
                            Name = "Meat Establishment 1",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("d21b287d-8e00-4bfb-beea-5cea7b419546"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "1bac1e15-ce58-4896-8651-b3b4324eb57b",
                            Long = 0.0,
                            Name = "Meat Establishment 2",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("eba443da-7bed-4469-99b1-cd15394c4e26"),
                            Lat = 0.0,
                            LicenseStatus = 1,
                            LicenseToOperateNumber = "23a46c9c-ab84-4cdc-931f-d52983e1c52b",
                            Long = 0.0,
                            Name = "Meat Establishment 3",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("bab844f5-991c-4ecd-bd2e-d1f407c17036"),
                            Lat = 0.0,
                            LicenseStatus = 0,
                            LicenseToOperateNumber = "025f2b38-8ade-4e81-b787-2ce564f2fd29",
                            Long = 0.0,
                            Name = "Meat Establishment 4",
                            Type = 1
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReceivingReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RepDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedByPOSMSHead")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("ReceivingReportId");

                    b.ToTable("MeatInspectionReports");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConductOfInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConductOfInspectionId");

                    b.ToTable("PassedForSlaughters");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceipt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DomainLayer.Models.PostArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostArticles");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PassedForSlaughterId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PassedForSlaughterId");

                    b.ToTable("Postmortems");
                });

            modelBuilder.Entity("DomainLayer.Models.QrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QrCodes");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatchCode")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("HoldingPenNo")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionStatus")
                        .HasColumnType("int");

                    b.Property<double>("LiveWeight")
                        .HasColumnType("float");

                    b.Property<Guid?>("MeatDealersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivingBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingDoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("MeatDealersId");

                    b.ToTable("ReceivingReports");
                });

            modelBuilder.Entity("DomainLayer.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("CertificateStatus")
                        .HasColumnType("int");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressedWeight")
                        .HasColumnType("int");

                    b.Property<int>("FitforConNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("FitforConSpecies")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("LiveWeight")
                        .HasColumnType("int");

                    b.Property<string>("MeatDealer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeadsPassed")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemCause")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemWeight")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Species")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<double>("WeightPassed")
                        .HasColumnType("float");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MICCancelled")
                        .HasColumnType("int");

                    b.Property<int>("MICIssued")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoFitForHumanConsumptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalNoFitForHumanConsumptionId");

                    b.ToTable("SummaryAndDistributionOfMICs");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DressedWeight")
                        .HasColumnType("float");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemId")
                        .HasColumnType("int");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostmortemId");

                    b.ToTable("TotalNoFitForHumanConsumptions");
                });

            modelBuilder.Entity("DomainLayer.Models.VehicleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Est")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "74eb8943-aeab-48e8-9b7d-6a50a5854d66",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "c45abf96-27b1-40cc-bd5a-1e0e896aea57",
                            Name = "InspectorAdministrator",
                            NormalizedName = "INSPECTORADMIN"
                        },
                        new
                        {
                            Id = "df668694-110f-4440-b790-9fb8f0c71327",
                            Name = "MTVAdministrator",
                            NormalizedName = "MTVADMIN"
                        },
                        new
                        {
                            Id = "883ad528-c9a8-403c-9f18-7bffc64acc61",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "115ef19f-ba67-4fb5-9640-b91a9c1e94bc",
                            Name = "MeatEstablishmentRepresentative",
                            NormalizedName = "MEATESTABLISHMENTREPRESENTATIVE"
                        },
                        new
                        {
                            Id = "f53efde5-ecd8-44f8-9be7-4f0632ae5c59",
                            Name = "MeatInspector",
                            NormalizedName = "MEATINSPECTOR"
                        },
                        new
                        {
                            Id = "a5202a8b-d580-4aa9-900e-9db890a9cc96",
                            Name = "MtvInspector",
                            NormalizedName = "MTVINSPECTOR"
                        },
                        new
                        {
                            Id = "64f39e6f-e876-4299-a553-2ca52f2ad18a",
                            Name = "MtvUsers",
                            NormalizedName = "MTVUSERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "40391f3e-b54c-4c84-bf11-31f435273605",
                            RoleId = "74eb8943-aeab-48e8-9b7d-6a50a5854d66"
                        },
                        new
                        {
                            UserId = "396a3331-817b-486d-997c-b455be314795",
                            RoleId = "c45abf96-27b1-40cc-bd5a-1e0e896aea57"
                        },
                        new
                        {
                            UserId = "16d52f03-c3bc-4657-8bce-6a8e90376885",
                            RoleId = "df668694-110f-4440-b790-9fb8f0c71327"
                        },
                        new
                        {
                            UserId = "81eab651-1155-4e57-8096-fa775110e0b3",
                            RoleId = "883ad528-c9a8-403c-9f18-7bffc64acc61"
                        },
                        new
                        {
                            UserId = "cd457db5-f2b0-4f29-a08e-7f2dbaae9f81",
                            RoleId = "115ef19f-ba67-4fb5-9640-b91a9c1e94bc"
                        },
                        new
                        {
                            UserId = "e7e77c05-4e01-4362-a6aa-af801894fa7a",
                            RoleId = "f53efde5-ecd8-44f8-9be7-4f0632ae5c59"
                        },
                        new
                        {
                            UserId = "8b1a576f-2e46-426e-9475-e5e8ab15f43a",
                            RoleId = "a5202a8b-d580-4aa9-900e-9db890a9cc96"
                        },
                        new
                        {
                            UserId = "489322fc-9ee4-4540-98c6-4db112033c06",
                            RoleId = "64f39e6f-e876-4299-a553-2ca52f2ad18a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId");

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.ConductOfInspection", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatInspectionReport", "MeatInspectionReport")
                        .WithMany()
                        .HasForeignKey("MeatInspectionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatInspectionReport");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("DomainLayer.Models.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperId");

                    b.HasOne("DomainLayer.Models.VehicleInfo", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Helper");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithMany()
                        .HasForeignKey("ReceivingReportId");

                    b.Navigation("AccountDetails");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.HasOne("DomainLayer.Models.ConductOfInspection", "ConductOfInspection")
                        .WithMany()
                        .HasForeignKey("ConductOfInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConductOfInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.HasOne("DomainLayer.Models.PassedForSlaughter", "PassedForSlaughter")
                        .WithMany()
                        .HasForeignKey("PassedForSlaughterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedForSlaughter");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.MeatDealers", "MeatDealers")
                        .WithMany()
                        .HasForeignKey("MeatDealersId");

                    b.Navigation("AccountDetails");

                    b.Navigation("MeatDealers");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.HasOne("DomainLayer.Models.TotalNoFitForHumanConsumptions", "TotalNoFitForHumanConsumption")
                        .WithMany()
                        .HasForeignKey("TotalNoFitForHumanConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalNoFitForHumanConsumption");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.HasOne("DomainLayer.Models.Postmortem", "Postmortem")
                        .WithMany()
                        .HasForeignKey("PostmortemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postmortem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
