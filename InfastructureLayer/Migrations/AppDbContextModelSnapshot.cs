// <auto-generated />
using System;
using InfastructureLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfastructureLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MeatEstablishmentId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("contactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e13d8946-67b4-4678-a0a2-8395d3dd4f7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46d54d84-09c1-422c-aff5-f1c1ae793921",
                            Email = "super@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER@ADMIN.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3jCzHaZwty7jsifoem/Ug+BItzMWewD9sGxo6eq7dsivK5zqA1oqWkCtFnZZ7MMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "c8867ea3-1d59-4496-9d5e-1ffc2192b596",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1c2074d-5849-4352-b88d-f911ad0f8038",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSPECTOR@ADMIN.COM",
                            NormalizedUserName = "INSPECTORADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZ+zTrfRI0aPGh5/4qnT+PsDLi35WLpNwSWT76nJ9oE+Ixm13CDCJqpkbi7gImcdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "inspectoradmin"
                        },
                        new
                        {
                            Id = "c8d2e500-f3d7-4462-afc1-4ac1791aa1df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e89de61-5df6-4631-9092-cb91bb77fe59",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MTV@ADMIN.COM",
                            NormalizedUserName = "MTVRADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECpUP9r1mMUdWwob5/EwC6C7WTAKem/u1ThRatLj/7Jn8bOSNcrcM8AMLoJsaThdog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvadmin"
                        },
                        new
                        {
                            Id = "740255c0-4437-48c3-aef8-f60c3ac5b66f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ce4c06e-6084-455d-9552-3e7817b95401",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEA1cJWDwCJX5l0jyBb5Q1lp68GvhiHWzPdrzPek6Bggr/c/u2WCSa+zsFuDYBFmJgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "71200491-86b8-4a01-8055-3e65289f0131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1f6ab51-083e-4b7f-a422-e165a8aff41c",
                            Email = "meat@rep.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEAT@REP.COM",
                            NormalizedUserName = "MEATREP",
                            PasswordHash = "AQAAAAIAAYagAAAAEPag6tCeODS4wZ7VQjFO3xYfrf7rXvbQZmT4sS9k2L3dYtMkrAufiYqf4pdhWEFZww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatrep"
                        },
                        new
                        {
                            Id = "fbc25f90-0f87-4be2-8daf-a0d57f867e71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24793d24-5e79-4842-9cb1-73e30107f57e",
                            Email = "meat@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEAT@INSPECTOR.COM",
                            NormalizedUserName = "MEATINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEO6MYIjMxjgXYhMizTXnN3iMNOi5DGNgWcM23//4oH+bDLJLfTT2IYtln/C0jhnXaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatinspector"
                        },
                        new
                        {
                            Id = "5ec843e6-bad4-4901-bc58-9ddb3730f2a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1fa9bdad-5fee-4a85-ba5e-f56d8a8a022a",
                            Email = "mtv@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MTV@INSPECTOR.COM",
                            NormalizedUserName = "MTVINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZRP1WZutSgj2N0AKsgEoM++llcMYgQ7QS8oZ0hLJIIoe8BtUOIYkhehVe2n41aDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvinspector"
                        },
                        new
                        {
                            Id = "34819ef1-3d5a-4fc4-953a-1054e75a9f7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "985353e5-a57f-40dc-b15c-ec7a24b01663",
                            Email = "mtv@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MTV@USER.COM",
                            NormalizedUserName = "MTVUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEL6J/2BduqAjQDUk0+FNBzG8uZr+UJXT8Rc8I5tqHUKdtqNz88Y1LahnvTugausgMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvuser"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.Antemortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int>("MeatInspectionReportId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeatInspectionReportId");

                    b.ToTable("ConductOfInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("estserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspecttime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("operatorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("DisapprovedApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseFront")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DomainLayer.Models.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlyDissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlySatisfied")
                        .HasColumnType("int");

                    b.Property<int>("Neutral")
                        .HasColumnType("int");

                    b.Property<int>("Satisfied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("DomainLayer.Models.Helper", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperMname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Helpers");
                });

            modelBuilder.Entity("DomainLayer.Models.LogTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogTransactions");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccreditionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HelperId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("applicationtype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("HelperId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MTVApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Processed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("MTVApplicationResults");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlateNo")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MTVDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectlyInstalled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enclosed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insulated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PlasticCurtains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempControlled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("passorfail")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVquizzes");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeatEstablishmentId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.ToTable("MeatDealers");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatEstablishment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<int?>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("LicenseToOperateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReceivingReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RepDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedByPOSMSHead")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("ReceivingReportId");

                    b.ToTable("MeatInspectionReports");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConductOfInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConductOfInspectionId");

                    b.ToTable("PassedForSlaughters");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceipt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DomainLayer.Models.PostArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostArticles");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PassedForSlaughterId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PassedForSlaughterId");

                    b.ToTable("Postmortems");
                });

            modelBuilder.Entity("DomainLayer.Models.QrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QrCodes");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatchCode")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("HoldingPenNo")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionStatus")
                        .HasColumnType("int");

                    b.Property<double>("LiveWeight")
                        .HasColumnType("float");

                    b.Property<int?>("MeatDealersId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivingBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingDoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("MeatDealersId");

                    b.ToTable("ReceivingReports");
                });

            modelBuilder.Entity("DomainLayer.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("CertificateStatus")
                        .HasColumnType("int");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressedWeight")
                        .HasColumnType("int");

                    b.Property<int>("FitforConNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("FitforConSpecies")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("LiveWeight")
                        .HasColumnType("int");

                    b.Property<string>("MeatDealer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeadsPassed")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemCause")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemWeight")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Species")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<double>("WeightPassed")
                        .HasColumnType("float");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MICCancelled")
                        .HasColumnType("int");

                    b.Property<int>("MICIssued")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoFitForHumanConsumptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalNoFitForHumanConsumptionId");

                    b.ToTable("SummaryAndDistributionOfMICs");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DressedWeight")
                        .HasColumnType("float");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemId")
                        .HasColumnType("int");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostmortemId");

                    b.ToTable("TotalNoFitForHumanConsumptions");
                });

            modelBuilder.Entity("DomainLayer.Models.VehicleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Est")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e272bc4f-641d-4821-9877-a054d7d21150",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "366b03a0-31fa-4c26-b5c5-0600f46b992c",
                            Name = "InspectorAdministrator",
                            NormalizedName = "INSPECTORADMIN"
                        },
                        new
                        {
                            Id = "14f82252-599c-4bbf-b38a-22f201524522",
                            Name = "MTVAdministrator",
                            NormalizedName = "MTVADMIN"
                        },
                        new
                        {
                            Id = "d13a9ff6-a3e3-4ed8-88e7-21cc3ebc6230",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "49f3739a-2d7b-4966-b10c-52845fff9a0d",
                            Name = "MeatEstablishmentRepresentative",
                            NormalizedName = "MEATESTABLISHMENTREPRESENTATIVE"
                        },
                        new
                        {
                            Id = "a5e18a35-772c-4987-adf3-15b3338fb58f",
                            Name = "MeatInspector",
                            NormalizedName = "MEATINSPECTOR"
                        },
                        new
                        {
                            Id = "41afa3e0-6e8b-4c1b-8793-0b05eb448c86",
                            Name = "MtvInspector",
                            NormalizedName = "MTVINSPECTOR"
                        },
                        new
                        {
                            Id = "83a13c13-b4fd-43ed-8331-07d809bfc968",
                            Name = "MtvUsers",
                            NormalizedName = "MTVUSERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e13d8946-67b4-4678-a0a2-8395d3dd4f7c",
                            RoleId = "e272bc4f-641d-4821-9877-a054d7d21150"
                        },
                        new
                        {
                            UserId = "c8867ea3-1d59-4496-9d5e-1ffc2192b596",
                            RoleId = "366b03a0-31fa-4c26-b5c5-0600f46b992c"
                        },
                        new
                        {
                            UserId = "c8d2e500-f3d7-4462-afc1-4ac1791aa1df",
                            RoleId = "14f82252-599c-4bbf-b38a-22f201524522"
                        },
                        new
                        {
                            UserId = "740255c0-4437-48c3-aef8-f60c3ac5b66f",
                            RoleId = "d13a9ff6-a3e3-4ed8-88e7-21cc3ebc6230"
                        },
                        new
                        {
                            UserId = "71200491-86b8-4a01-8055-3e65289f0131",
                            RoleId = "49f3739a-2d7b-4966-b10c-52845fff9a0d"
                        },
                        new
                        {
                            UserId = "fbc25f90-0f87-4be2-8daf-a0d57f867e71",
                            RoleId = "a5e18a35-772c-4987-adf3-15b3338fb58f"
                        },
                        new
                        {
                            UserId = "5ec843e6-bad4-4901-bc58-9ddb3730f2a5",
                            RoleId = "41afa3e0-6e8b-4c1b-8793-0b05eb448c86"
                        },
                        new
                        {
                            UserId = "34819ef1-3d5a-4fc4-953a-1054e75a9f7c",
                            RoleId = "83a13c13-b4fd-43ed-8331-07d809bfc968"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId");

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.Antemortem", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatInspectionReport", "MeatInspectionReport")
                        .WithMany()
                        .HasForeignKey("MeatInspectionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatInspectionReport");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("DomainLayer.Models.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperId");

                    b.HasOne("DomainLayer.Models.VehicleInfo", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Helper");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithMany()
                        .HasForeignKey("ReceivingReportId");

                    b.Navigation("AccountDetails");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.HasOne("DomainLayer.Models.Antemortem", "ConductOfInspection")
                        .WithMany()
                        .HasForeignKey("ConductOfInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConductOfInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.HasOne("DomainLayer.Models.PassedForSlaughter", "PassedForSlaughter")
                        .WithMany()
                        .HasForeignKey("PassedForSlaughterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedForSlaughter");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.MeatDealers", "MeatDealers")
                        .WithMany()
                        .HasForeignKey("MeatDealersId");

                    b.Navigation("AccountDetails");

                    b.Navigation("MeatDealers");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.HasOne("DomainLayer.Models.TotalNoFitForHumanConsumptions", "TotalNoFitForHumanConsumption")
                        .WithMany()
                        .HasForeignKey("TotalNoFitForHumanConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalNoFitForHumanConsumption");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.HasOne("DomainLayer.Models.Postmortem", "Postmortem")
                        .WithMany()
                        .HasForeignKey("PostmortemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postmortem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
