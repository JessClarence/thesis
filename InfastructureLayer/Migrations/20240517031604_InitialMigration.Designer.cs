// <auto-generated />
using System;
using InfastructureLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfastructureLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240517031604_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MeatEstablishmentId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Roles")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("contactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("middleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f66739a0-476f-47e5-a7fd-3a84047af089",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd27ff06-ffea-410f-82ca-087cf50f6f8a",
                            Email = "super@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPER@ADMIN.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAApWY/IO/f7XJG5ov4F94XyIYdupZzpNGHqM+jlweekFtOs5hAAUtKLge7BDKn5Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "9ef16119-f9fa-4b54-9d9b-5417e5462c37",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d95fff77-a681-459f-a6ee-a3d92e3d1331",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "INSPECTOR@ADMIN.COM",
                            NormalizedUserName = "INSPECTORADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEICh5fhQ91EmtVSPXJmfCuAGvwNrzWoG6QbFLCJArVCnBS4gz7lxx7ZbxOxs6p3Q5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "inspectoradmin"
                        },
                        new
                        {
                            Id = "26924353-da23-4429-ab55-446a56c9f5b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee3aeec6-4b92-4d4f-b982-e85840199fe7",
                            Email = "mtv@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MTV@ADMIN.COM",
                            NormalizedUserName = "MTVRADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEXFF/Fb/ZmQ5nIKCw9MYtvB9T2OQNmfrob33PrbAaXa/hLX8cOQThyvMSYTE3PJmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvadmin"
                        },
                        new
                        {
                            Id = "30c71afd-3c9c-4508-85e6-e04ebc764893",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28ae9d21-a197-4734-83e1-a0a36ad80843",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDe+3C3DBexdq25PK96atODZ3bYl99zyqA8paC5h/v5UHKEsStY497F31V258rBbzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        },
                        new
                        {
                            Id = "daff8249-afac-40a5-85c3-ad726961b3aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec9f92de-aca0-4750-be14-2f4de4153c9f",
                            Email = "meat@rep.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEAT@REP.COM",
                            NormalizedUserName = "MEATREP",
                            PasswordHash = "AQAAAAIAAYagAAAAEBIDqBK68gxzAFiMnUeZ/tJyBxBvh821vtZQ1dZm/zQ9otYpBxQ6RoBzUesL3PlhAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatrep"
                        },
                        new
                        {
                            Id = "b305908f-7e27-4356-a112-2778fbf621d2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebab2d45-288a-4ce8-a299-1daab27d69e4",
                            Email = "meat@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEAT@INSPECTOR.COM",
                            NormalizedUserName = "MEATINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEKsXOCIXgO7ked17C6EbZ1yQeKkTkmNXFexpilp8mRGVsHvWyPU5pxsoLD4Xg4OXXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "meatinspector"
                        },
                        new
                        {
                            Id = "cce24038-224f-4626-98aa-2a4df54a5c35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64971b23-0ad5-4eee-b5c2-267df9f079d8",
                            Email = "mtv@inspector.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MTV@INSPECTOR.COM",
                            NormalizedUserName = "MTVINSPECTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEO12cJ+0lgQ6nGvqgyyCrPqExosPpga/fM+uekrQbg1mc9luWPh6VmXyuFAGgLI0bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvinspector"
                        },
                        new
                        {
                            Id = "2b81fc12-d568-4be5-9ae6-8de0ce5eff94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70123a97-3e85-4100-93f4-922ec0f9e3d2",
                            Email = "mtv@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MTV@USER.COM",
                            NormalizedUserName = "MTVUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAECxGb4Cpvbc6+4OlwoU9nebHplsfpmE6EZUirJ7QWGLSLD3q+Z7Tu0ON5vlDdRnelQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "mtvuser"
                        });
                });

            modelBuilder.Entity("DomainLayer.Models.CheckList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("estserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspectorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("inspecttime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("operatorname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("plateno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckLists");
                });

            modelBuilder.Entity("DomainLayer.Models.ConductOfInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int>("MeatInspectionReportId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeatInspectionReportId");

                    b.ToTable("ConductOfInspections");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("DisapprovedApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LicenseBack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseFront")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DomainLayer.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlyDissatisfied")
                        .HasColumnType("int");

                    b.Property<int>("HighlySatisfied")
                        .HasColumnType("int");

                    b.Property<int>("Neutral")
                        .HasColumnType("int");

                    b.Property<int>("Satisfied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("DomainLayer.Models.Helper", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperFname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperMname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birthdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Helpers");
                });

            modelBuilder.Entity("DomainLayer.Models.LogTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogPurpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogTransactions");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccreditionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HelperId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerFname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerMname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("applicationtype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("HelperId");

                    b.HasIndex("VehicleId");

                    b.ToTable("MTVApplications");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVInspectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Processed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Received")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MTVInspectionId");

                    b.ToTable("MTVApplicationResults");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicantType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlNo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FaxNumber")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlateNo")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MTVDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CorrectlyInstalled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enclosed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insulated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PlasticCurtains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempControlled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("passorfail")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("MTVquizzes");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeatEstablishmentId")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeatEstablishmentId");

                    b.ToTable("MeatDealers");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatEstablishment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<int?>("LicenseStatus")
                        .HasColumnType("int");

                    b.Property<string>("LicenseToOperateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReceivingReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RepDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedByPOSMSHead")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("ReceivingReportId");

                    b.ToTable("MeatInspectionReports");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConductOfInspectionId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ConductOfInspectionId");

                    b.ToTable("PassedForSlaughters");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MTVApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReceipt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SOA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MTVApplicationId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DomainLayer.Models.PostArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostArticles");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PassedForSlaughterId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PassedForSlaughterId");

                    b.ToTable("Postmortems");
                });

            modelBuilder.Entity("DomainLayer.Models.QrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QrCodes");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RecDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.ToTable("Receivings");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatchCode")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("HoldingPenNo")
                        .HasColumnType("int");

                    b.Property<int?>("InspectionStatus")
                        .HasColumnType("int");

                    b.Property<double>("LiveWeight")
                        .HasColumnType("float");

                    b.Property<int?>("MeatDealersId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceivingBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingDoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId");

                    b.HasIndex("MeatDealersId");

                    b.ToTable("ReceivingReports");
                });

            modelBuilder.Entity("DomainLayer.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalPart")
                        .HasColumnType("int");

                    b.Property<int>("Cause")
                        .HasColumnType("int");

                    b.Property<int>("CertificateStatus")
                        .HasColumnType("int");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DressedWeight")
                        .HasColumnType("int");

                    b.Property<int>("FitforConNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("FitforConSpecies")
                        .HasColumnType("int");

                    b.Property<int>("Issue")
                        .HasColumnType("int");

                    b.Property<int?>("LiveWeight")
                        .HasColumnType("int");

                    b.Property<string>("MeatDealer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("NoOfHeadsPassed")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemCause")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemNoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemWeight")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Species")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<double>("WeightPassed")
                        .HasColumnType("float");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MICCancelled")
                        .HasColumnType("int");

                    b.Property<int>("MICIssued")
                        .HasColumnType("int");

                    b.Property<int>("TotalNoFitForHumanConsumptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TotalNoFitForHumanConsumptionId");

                    b.ToTable("SummaryAndDistributionOfMICs");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("DressedWeight")
                        .HasColumnType("float");

                    b.Property<int>("NoOfHeads")
                        .HasColumnType("int");

                    b.Property<int>("PostmortemId")
                        .HasColumnType("int");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostmortemId");

                    b.ToTable("TotalNoFitForHumanConsumptions");
                });

            modelBuilder.Entity("DomainLayer.Models.VehicleInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Est")
                        .HasColumnType("int");

                    b.Property<string>("LTOCR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LTOOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleMaker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleInfos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "df6864e8-c680-4df8-8bcc-990ac0d318bf",
                            Name = "SuperAdministrator",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "8ff06b4e-ed7c-4ace-9956-d88366b7f786",
                            Name = "InspectorAdministrator",
                            NormalizedName = "INSPECTORADMIN"
                        },
                        new
                        {
                            Id = "a0ba380e-aa40-4351-96f9-735e087ce21f",
                            Name = "MTVAdministrator",
                            NormalizedName = "MTVADMIN"
                        },
                        new
                        {
                            Id = "bf8bce35-2ce9-4cbe-b7ad-5090d976f49f",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "18624e89-0312-4d39-8e7a-0e9701fff257",
                            Name = "MeatEstablishmentRepresentative",
                            NormalizedName = "MEATESTABLISHMENTREPRESENTATIVE"
                        },
                        new
                        {
                            Id = "dddf7db0-ddaf-447b-8d94-64f294b55e87",
                            Name = "MeatInspector",
                            NormalizedName = "MEATINSPECTOR"
                        },
                        new
                        {
                            Id = "a9e34847-ce14-43cd-9e2e-b2b38eae70a1",
                            Name = "MtvInspector",
                            NormalizedName = "MTVINSPECTOR"
                        },
                        new
                        {
                            Id = "efdf3dd1-18a5-4cbc-9310-3ce07f75bfc6",
                            Name = "MtvUsers",
                            NormalizedName = "MTVUSERS"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f66739a0-476f-47e5-a7fd-3a84047af089",
                            RoleId = "df6864e8-c680-4df8-8bcc-990ac0d318bf"
                        },
                        new
                        {
                            UserId = "9ef16119-f9fa-4b54-9d9b-5417e5462c37",
                            RoleId = "8ff06b4e-ed7c-4ace-9956-d88366b7f786"
                        },
                        new
                        {
                            UserId = "26924353-da23-4429-ab55-446a56c9f5b9",
                            RoleId = "a0ba380e-aa40-4351-96f9-735e087ce21f"
                        },
                        new
                        {
                            UserId = "30c71afd-3c9c-4508-85e6-e04ebc764893",
                            RoleId = "bf8bce35-2ce9-4cbe-b7ad-5090d976f49f"
                        },
                        new
                        {
                            UserId = "daff8249-afac-40a5-85c3-ad726961b3aa",
                            RoleId = "18624e89-0312-4d39-8e7a-0e9701fff257"
                        },
                        new
                        {
                            UserId = "b305908f-7e27-4356-a112-2778fbf621d2",
                            RoleId = "dddf7db0-ddaf-447b-8d94-64f294b55e87"
                        },
                        new
                        {
                            UserId = "cce24038-224f-4626-98aa-2a4df54a5c35",
                            RoleId = "a9e34847-ce14-43cd-9e2e-b2b38eae70a1"
                        },
                        new
                        {
                            UserId = "2b81fc12-d568-4be5-9ae6-8de0ce5eff94",
                            RoleId = "efdf3dd1-18a5-4cbc-9310-3ce07f75bfc6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.AccountDetails", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId");

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.ConductOfInspection", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatInspectionReport", "MeatInspectionReport")
                        .WithMany()
                        .HasForeignKey("MeatInspectionReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatInspectionReport");
                });

            modelBuilder.Entity("DomainLayer.Models.DisapprovedApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplication", b =>
                {
                    b.HasOne("DomainLayer.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("DomainLayer.Models.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperId");

                    b.HasOne("DomainLayer.Models.VehicleInfo", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Driver");

                    b.Navigation("Helper");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVApplicationResult", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVInspection", "MTVInspection")
                        .WithMany()
                        .HasForeignKey("MTVInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVInspection", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MTVquiz", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatDealers", b =>
                {
                    b.HasOne("DomainLayer.Models.MeatEstablishment", "MeatEstablishment")
                        .WithMany()
                        .HasForeignKey("MeatEstablishmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeatEstablishment");
                });

            modelBuilder.Entity("DomainLayer.Models.MeatInspectionReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.ReceivingReport", "ReceivingReport")
                        .WithMany()
                        .HasForeignKey("ReceivingReportId");

                    b.Navigation("AccountDetails");

                    b.Navigation("ReceivingReport");
                });

            modelBuilder.Entity("DomainLayer.Models.PassedForSlaughter", b =>
                {
                    b.HasOne("DomainLayer.Models.ConductOfInspection", "ConductOfInspection")
                        .WithMany()
                        .HasForeignKey("ConductOfInspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConductOfInspection");
                });

            modelBuilder.Entity("DomainLayer.Models.Payment", b =>
                {
                    b.HasOne("DomainLayer.Models.MTVApplication", "MTVApplication")
                        .WithMany()
                        .HasForeignKey("MTVApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MTVApplication");
                });

            modelBuilder.Entity("DomainLayer.Models.Postmortem", b =>
                {
                    b.HasOne("DomainLayer.Models.PassedForSlaughter", "PassedForSlaughter")
                        .WithMany()
                        .HasForeignKey("PassedForSlaughterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PassedForSlaughter");
                });

            modelBuilder.Entity("DomainLayer.Models.Receiving", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("DomainLayer.Models.ReceivingReport", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", "AccountDetails")
                        .WithMany()
                        .HasForeignKey("AccountDetailsId");

                    b.HasOne("DomainLayer.Models.MeatDealers", "MeatDealers")
                        .WithMany()
                        .HasForeignKey("MeatDealersId");

                    b.Navigation("AccountDetails");

                    b.Navigation("MeatDealers");
                });

            modelBuilder.Entity("DomainLayer.Models.SummaryAndDistributionOfMIC", b =>
                {
                    b.HasOne("DomainLayer.Models.TotalNoFitForHumanConsumptions", "TotalNoFitForHumanConsumption")
                        .WithMany()
                        .HasForeignKey("TotalNoFitForHumanConsumptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TotalNoFitForHumanConsumption");
                });

            modelBuilder.Entity("DomainLayer.Models.TotalNoFitForHumanConsumptions", b =>
                {
                    b.HasOne("DomainLayer.Models.Postmortem", "Postmortem")
                        .WithMany()
                        .HasForeignKey("PostmortemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Postmortem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DomainLayer.Models.AccountDetails", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
